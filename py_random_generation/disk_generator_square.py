import random
import math

# === CONFIGURATION ===
inches = 8;
mm = inches * 25.4;
R=mm/2;

square_size = mm              # Side length of the square
exclusion_radius = R          # Radius of the exclusion circle
min_radius = 6.5
max_radius = 8.5
num_attempts = 2000            # Number of random attempts
output_file = "/home/ben/Desktop/openSCAD/square_circle_pack.scad"

# === SETUP ===
center_x = square_size / 2
center_y = square_size / 2
shapes = []

def distance(x1, y1, x2, y2):
    return math.hypot(x1 - x2, y1 - y2)

def overlaps_existing(x, y, r):
    for sx, sy, sr in shapes:
        if distance(x, y, sx, sy) < (r + sr):
            return True
    return False

def overlaps_exclusion(x, y, r):
    return distance(x, y, center_x, center_y) - r < exclusion_radius

def inside_square(x, y, r):
    return (x - r >= 0 and x + r <= square_size and
            y - r >= 0 and y + r <= square_size)

# === GENERATE SHAPES ===
for _ in range(num_attempts):
    r = random.uniform(min_radius, max_radius)
    x = random.uniform(r, square_size - r)
    y = random.uniform(r, square_size - r)

    if not inside_square(x, y, r):
        continue
    if overlaps_exclusion(x, y, r):
        continue
    if overlaps_existing(x, y, r):
        continue

    shapes.append((x, y, r))

# === WRITE TO SCAD FILE ===
with open(output_file, "w") as f:
    f.write(f"// Generated by Python script\n")
    f.write(f"$fn = 300;\n")

    # Draw square boundary
    f.write("module square_circle_pack() {\n")

    # Cut out exclusion circle

    # Draw circles
    for x, y, r in shapes:
        f.write(f"translate([{x:.3f}, {y:.3f}]) circle({r:.3f});\n")
    
    f.write("};\n")

print(f"Generated {len(shapes)} shapes and saved to {output_file}")
